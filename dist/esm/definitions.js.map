{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAYA;;GAEG;AACH,MAAM,CAAN,IAAY,WAiBX;AAjBD,WAAY,WAAW;IACrB;;OAEG;IACH,mDAAO,CAAA;IACP;;OAEG;IACH,6CAAI,CAAA;IACJ;;OAEG;IACH,yCAAE,CAAA;IACF;;OAEG;IACH,iDAAM,CAAA;AACR,CAAC,EAjBW,WAAW,KAAX,WAAW,QAiBtB;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,UAwBX;AAxBD,WAAY,UAAU;IACpB,6DAAa,CAAA;IACb,6DAAa,CAAA;IACb,yDAAW,CAAA;IACX,2EAAoB,CAAA;IACpB,yFAA2B,CAAA;IAC3B,iDAAO,CAAA;IACP,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,uDAAU,CAAA;IACV,yEAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,kEAAe,CAAA;IACf,sDAAS,CAAA;IACT,oDAAQ,CAAA;IACR,sDAAS,CAAA;IACT,sEAAiB,CAAA;IACjB,kEAAe,CAAA;IACf,wEAAkB,CAAA;IAClB,0EAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,8DAAa,CAAA;IACb,4EAAoB,CAAA;IACpB,4EAAoB,CAAA;AACtB,CAAC,EAxBW,UAAU,KAAV,UAAU,QAwBrB","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\n/**\n * Interface representing the permission status for various web sensors.\n */\nexport interface PermissionStatus {\n  accelerometer: PermissionState;\n  'ambient-light-sensor': PermissionState;\n  gyroscope: PermissionState;\n  magnetometer: PermissionState;\n}\n\n/**\n * Enum representing the delay rates for sensor data.\n */\nexport enum SensorDelay {\n  /**\n   * Get sensor data as fast as possible.\n   */\n  FASTEST,\n  /**\n   * Rate suitable for games.\n   */\n  GAME,\n  /**\n   * Rate suitable for user interface.\n   */\n  UI,\n  /**\n   * Default rate, suitable for screen orientation changes.\n   */\n  NORMAL,\n}\n\n/**\n * Enum representing the types of sensors available in the application.\n */\nexport enum SensorType {\n  AMBIENT_LIGHT,\n  ACCELEROMETER,\n  TEMPERATURE,\n  GAME_ROTATION_VECTOR,\n  GEOMAGNETIC_ROTATION_VECTOR,\n  GRAVITY,\n  GYROSCOPE,\n  HEART_BEAT,\n  HEART_RATE,\n  LINEAR_ACCELERATION,\n  MAGNETOMETER,\n  MOTION_DETECTOR,\n  POSE_6DOF,\n  PRESSURE,\n  PROXIMITY,\n  RELATIVE_HUMIDITY,\n  ROTATION_VECTOR,\n  SIGNIFICANT_MOTION,\n  STATIONARY_DETECTOR,\n  STEP_COUNTER,\n  STEP_DETECTOR,\n  ABSOLUTE_ORIENTATION,\n  RELATIVE_ORIENTATION,\n}\n\n/**\n * Represents the event names for sensor data.\n */\nexport type SensorEvent = keyof typeof SensorType;\n\n/**\n * Represents the options for a sensor.\n */\nexport interface SensorOptions {\n  /**\n   * The type of sensor to use.\n   */\n  type: SensorType;\n  /**\n   * The delay between sensor readings.\n   */\n  delay?: SensorDelay;\n}\n\n/**\n * Interface representing sensor information.\n */\nexport interface SensorInfos {\n  /**\n   * The vendor of the sensor.\n   */\n  vendor: string;\n  /**\n   * The version of the sensor.\n   */\n  version: number;\n  /**\n   * The type of the sensor.\n   */\n  type: number;\n  /**\n   * The maximum range of the sensor.\n   */\n  maxRange: number;\n  /**\n   * The resolution of the sensor.\n   */\n  resolution: number;\n  /**\n   * The power consumption of the sensor.\n   */\n  power: number;\n  /**\n   * The minimum delay between sensor readings.\n   */\n  minDelay: number;\n  /**\n   * The maximum delay between sensor readings.\n   */\n  maxDelay: number;\n}\n\n/**\n * Represents the data returned by a sensor, including any additional information about the sensor.\n */\nexport interface SensorData extends SensorOptions {\n  infos?: SensorInfos;\n}\n\n/**\n * Represents the result of a sensor reading.\n */\nexport interface SensorResult {\n  /**\n   * The accuracy of the sensor reading, if available.\n   */\n  accuracy?: number;\n  /**\n   * The timestamp of the sensor reading, if available.\n   */\n  timestamp?: number;\n  /**\n   * The values obtained from the sensor reading.\n   */\n  values: number[];\n}\n\n/**\n * The Sensors Plugin interface.\n */\nexport interface SensorsPlugin {\n  /**\n   * Initializes the sensor plugin with the given options.\n   * @param options The options to initialize the sensor plugin with.\n   * @returns A Promise that resolves to the sensor data, or undefined if initialization failed.\n   */\n  init(options: SensorOptions): Promise<SensorData | undefined>;\n  /**\n   * Gets a list of available sensors.\n   * @returns A Promise that resolves to an object containing the available sensors.\n   */\n  getAvailableSensors(): Promise<{\n    sensors: SensorType[];\n  }>;\n  /**\n   * Checks the permissions for the given sensor.\n   * @returns A Promise that resolves to the permission status.\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  /**\n   * Requests permission to use the given sensor.\n   * @param sensor The sensor to request permission for.\n   * @returns A Promise that resolves to the permission status.\n   */\n  requestPermissions(sensor: SensorOptions): Promise<PermissionStatus>;\n  /**\n   * Starts the given sensor.\n   * @param sensor The sensor to start.\n   * @returns A Promise that resolves when the sensor has started.\n   */\n  start(sensor: SensorOptions): Promise<void>;\n  /**\n   * Stops the given sensor.\n   * @param sensor The sensor to stop.\n   * @returns A Promise that resolves when the sensor has stopped.\n   */\n  stop(sensor: SensorOptions): Promise<void>;\n  /**\n   * Adds a listener for the given sensor event.\n   * @param eventName The name of the event to listen for.\n   * @param listenerFunc The function to call when the event is triggered.\n   * @returns A Promise that resolves to a handle for the listener.\n   */\n  addListener(eventName: SensorEvent, listenerFunc: (event: SensorResult) => void): Promise<PluginListenerHandle>;\n  /**\n   * Removes all listeners for the sensor plugin.\n   * @returns A Promise that resolves when all listeners have been removed.\n   */\n  removeAllListeners(): Promise<void>;\n}\n"]}