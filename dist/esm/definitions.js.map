{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAYA;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAU,CAAC;AAIzE;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,eAAe;IACf,eAAe;IACf,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,SAAS;IACT,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,cAAc;IACd,iBAAiB;IACjB,WAAW;IACX,UAAU;IACV,WAAW;IACX,mBAAmB;IACnB,iBAAiB;IACjB,oBAAoB;IACpB,qBAAqB;IACrB,cAAc;IACd,eAAe;IACf,sBAAsB;IACtB,sBAAsB;CACd,CAAC","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\n/**\n * Interface representing the permission status for various web sensors.\n */\nexport interface PermissionStatus {\n  accelerometer: PermissionState;\n  'ambient-light-sensor': PermissionState;\n  gyroscope: PermissionState;\n  magnetometer: PermissionState;\n}\n\n/**\n * Array of possible sensor delays.\n */\nexport const SensorDelays = ['FASTEST', 'GAME', 'UI', 'NORMAL'] as const;\n\nexport type SensorDelay = (typeof SensorDelays)[number];\n\n/**\n * Array representing the types of sensors available in the application.\n */\nexport const SensorTypes = [\n  'AMBIENT_LIGHT',\n  'ACCELEROMETER',\n  'TEMPERATURE',\n  'GAME_ROTATION_VECTOR',\n  'GEOMAGNETIC_ROTATION_VECTOR',\n  'GRAVITY',\n  'GYROSCOPE',\n  'HEART_BEAT',\n  'HEART_RATE',\n  'LINEAR_ACCELERATION',\n  'MAGNETOMETER',\n  'MOTION_DETECTOR',\n  'POSE_6DOF',\n  'PRESSURE',\n  'PROXIMITY',\n  'RELATIVE_HUMIDITY',\n  'ROTATION_VECTOR',\n  'SIGNIFICANT_MOTION',\n  'STATIONARY_DETECTOR',\n  'STEP_COUNTER',\n  'STEP_DETECTOR',\n  'ABSOLUTE_ORIENTATION',\n  'RELATIVE_ORIENTATION',\n] as const;\n\nexport type SensorType = (typeof SensorTypes)[number];\n\n/**\n * Represents the options for a sensor.\n */\nexport interface SensorOptions {\n  /**\n   * The type of sensor to use.\n   */\n  type: SensorType;\n  /**\n   * The delay between sensor readings.\n   */\n  delay?: SensorDelay;\n}\n\n/**\n * Interface representing sensor information.\n */\nexport interface SensorInfos {\n  /**\n   * The name of the sensor.\n   */\n  name: string;\n  /**\n   * The vendor of the sensor.\n   */\n  vendor: string;\n  /**\n   * The version of the sensor.\n   */\n  version: number;\n  /**\n   * The type of the sensor.\n   */\n  type: number;\n  /**\n   * The maximum range of the sensor in sensor units.\n   */\n  maxRange: number;\n  /**\n   * The resolution of the sensor in sensor units.\n   */\n  resolution: number;\n  /**\n   * The power consumption of the sensor in milliamperes.\n   */\n  power: number;\n  /**\n   * The minimum delay between sensor readings in microseconds.\n   */\n  minDelay: number;\n  /**\n   * The maximum delay between sensor readings in microseconds.\n   */\n  maxDelay: number;\n}\n\n/**\n * Represents the data returned by a sensor, including any additional information about the sensor.\n */\nexport interface SensorData extends Required<SensorOptions> {\n  infos?: SensorInfos;\n}\n\n/**\n * Represents the result of a sensor reading.\n */\nexport interface SensorResult {\n  /**\n   * The accuracy of the sensor reading, if available.\n   */\n  accuracy?: number;\n  /**\n   * The timestamp of the sensor reading, if available.\n   */\n  timestamp?: number;\n  /**\n   * The values obtained from the sensor reading.\n   */\n  values: number[];\n}\n\n/**\n * The Sensors Plugin interface.\n */\nexport interface SensorsPlugin {\n  /**\n   * Initializes the sensor plugin with the given options.\n   * @param options The options to initialize the sensor plugin with.\n   * @returns A Promise that resolves to the sensor data, or undefined if initialization failed.\n   */\n  init: (options: SensorOptions) => Promise<SensorData | undefined>;\n  /**\n   * Gets a list of available sensors.\n   * @returns A Promise that resolves to an object containing the available sensors.\n   */\n  getAvailableSensors: () => Promise<{\n    sensors: SensorType[];\n  }>;\n  /**\n   * Checks the permissions for the given sensor.\n   * @returns A Promise that resolves to the permission status.\n   */\n  checkPermissions: () => Promise<PermissionStatus>;\n  /**\n   * Requests permission to use the given sensor.\n   * @param sensor The sensor to request permission for.\n   * @returns A Promise that resolves to the permission status.\n   */\n  requestPermissions: (sensor: SensorOptions) => Promise<PermissionStatus>;\n  /**\n   * Starts the given sensor.\n   * @param sensor The sensor to start.\n   * @returns A Promise that resolves when the sensor has started.\n   */\n  start: (options: { type: SensorType }) => Promise<void>;\n  /**\n   * Stops the given sensor.\n   * @param sensor The sensor to stop.\n   * @returns A Promise that resolves when the sensor has stopped.\n   */\n  stop: (options: { type: SensorType }) => Promise<void>;\n  /**\n   * Adds a listener for the given sensor event.\n   * @param eventName The name of the event to listen for.\n   * @param listenerFunc The function to call when the event is triggered.\n   * @returns A Promise that resolves to a handle for the listener.\n   */\n  addListener: (eventName: SensorType, listenerFunc: (event: SensorResult) => void) => Promise<PluginListenerHandle>;\n  /**\n   * Removes all listeners for the sensor plugin.\n   * @returns A Promise that resolves when all listeners have been removed.\n   */\n  removeAllListeners: () => Promise<void>;\n}\n"]}