{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AASA,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,mDAAO,CAAA;IACP,6CAAI,CAAA;IACJ,yCAAE,CAAA;IACF,iDAAM,CAAA;AACR,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAED,MAAM,CAAN,IAAY,UAwBX;AAxBD,WAAY,UAAU;IACpB,6DAAa,CAAA;IACb,6DAAa,CAAA;IACb,yDAAW,CAAA;IACX,2EAAoB,CAAA;IACpB,yFAA2B,CAAA;IAC3B,iDAAO,CAAA;IACP,qDAAS,CAAA;IACT,uDAAU,CAAA;IACV,uDAAU,CAAA;IACV,yEAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,kEAAe,CAAA;IACf,sDAAS,CAAA;IACT,oDAAQ,CAAA;IACR,sDAAS,CAAA;IACT,sEAAiB,CAAA;IACjB,kEAAe,CAAA;IACf,wEAAkB,CAAA;IAClB,0EAAmB,CAAA;IACnB,4DAAY,CAAA;IACZ,8DAAa,CAAA;IACb,4EAAoB,CAAA;IACpB,4EAAoB,CAAA;AACtB,CAAC,EAxBW,UAAU,KAAV,UAAU,QAwBrB","sourcesContent":["import type { PermissionState, PluginListenerHandle } from '@capacitor/core';\n\nexport interface WebPermissionStatus {\n  accelerometer: PermissionState;\n  'ambient-light-sensor': PermissionState;\n  gyroscope: PermissionState;\n  magnetometer: PermissionState;\n}\n\nexport enum SensorDelay {\n  FASTEST, // Get sensor data as fast as possible\n  GAME, // Rate suitable for games\n  UI, // Rate suitable for user interface\n  NORMAL, // Default rate, suitable for screen orientation changes\n}\n\nexport enum SensorType {\n  AMBIENT_LIGHT,\n  ACCELEROMETER,\n  TEMPERATURE,\n  GAME_ROTATION_VECTOR,\n  GEOMAGNETIC_ROTATION_VECTOR,\n  GRAVITY,\n  GYROSCOPE,\n  HEART_BEAT,\n  HEART_RATE,\n  LINEAR_ACCELERATION,\n  MAGNETOMETER,\n  MOTION_DETECTOR,\n  POSE_6DOF,\n  PRESSURE,\n  PROXIMITY,\n  RELATIVE_HUMIDITY,\n  ROTATION_VECTOR,\n  SIGNIFICANT_MOTION,\n  STATIONARY_DETECTOR,\n  STEP_COUNTER,\n  STEP_DETECTOR,\n  ABSOLUTE_ORIENTATION,\n  RELATIVE_ORIENTATION,\n}\n\nexport type SensorEvent = keyof typeof SensorType;\n\nexport interface SensorOptions {\n  type: SensorType;\n  delay?: SensorDelay;\n}\n\nexport interface SensorInfos {\n  vendor: string;\n  version: number;\n  type: number;\n  maxRange: number;\n  resolution: number;\n  power: number;\n  minDelay: number;\n  maxDelay: number;\n}\n\nexport interface SensorData extends SensorOptions {\n  infos?: SensorInfos;\n}\n\nexport interface SensorListenerResult {\n  accuracy?: number;\n  timestamp?: number;\n  values: number[];\n}\n\nexport interface SensorsPlugin {\n  init(options: SensorOptions): Promise<SensorData | undefined>;\n  getAvailableSensors(): Promise<{\n    sensors: SensorType[];\n  }>;\n  requestPermissions(sensor: SensorData): Promise<WebPermissionStatus>;\n  start(sensor: SensorData): Promise<void>;\n  stop(sensor: SensorData): Promise<void>;\n  addListener(\n    eventName: SensorEvent,\n    listenerFunc: (event: SensorListenerResult) => void,\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}